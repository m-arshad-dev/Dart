{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Learn Dart \u2013 From Basics to Advanced","text":"<p>A complete, hands-on guide to mastering the Dart programming language \u2014 from fundamentals to advanced concepts.</p> <p>Welcome to Learn Dart, a step-by-step learning path designed for both beginners and developers who want to build apps, servers, or tools using Google\u2019s Dart language.</p>"},{"location":"#about-this-tutorial","title":"\ud83d\udcd8 About This Tutorial","text":"<p>This course takes you from your first line of Dart code to creating real-world projects \u2014 including Flutter apps, backend APIs, and command-line tools.</p>"},{"location":"#learning-outcomes","title":"\ud83c\udfaf Learning Outcomes","text":"<p>By the end of this tutorial, you\u2019ll be able to:</p> <ul> <li>Understand Dart syntax and structure</li> <li>Write object-oriented and asynchronous Dart programs</li> <li>Use Dart for Flutter app development</li> <li>Build command-line and backend applications</li> </ul> <p>Author: Muhammad Arshad Repository: github.com/yourusername/learn-dart</p>"},{"location":"#step-1-understand-what-dart-is","title":"\ud83e\ude9c Step 1: Understand What Dart Is","text":"<p>Before writing your first program, it\u2019s essential to understand what Dart is and why it exists \u2014 this gives your learning both direction and purpose.</p>"},{"location":"#what-is-dart","title":"\ud83e\udde0 What is Dart?","text":"<p>Dart is a modern, open-source programming language created by Google. It is designed to be:</p> <ul> <li>\u26a1 Fast \u2014 compiled to native code or JavaScript  </li> <li>\u270d\ufe0f Productive \u2014 simple and expressive syntax  </li> <li>\ud83c\udf0d Portable \u2014 runs on mobile, web, desktop, and servers  </li> </ul> <p>You can think of Dart as a blend of the ease of JavaScript and the power of Java/C# \u2014 clean, structured, and scalable.</p> <p>Did You Know?</p> <p>Dart is the official language of Flutter, Google\u2019s framework for building beautiful, multi-platform applications.</p>"},{"location":"#what-can-you-build-with-dart","title":"\ud83d\udca1 What Can You Build with Dart?","text":"<p>Dart is a versatile language that adapts to different use cases.</p>"},{"location":"#1-flutter-development","title":"\ud83e\udde9 1. Flutter Development","text":"<p>Build cross-platform applications (Android, iOS, Web, Desktop) with a single codebase using Flutter \u2014 powered entirely by Dart. Ideal for developers interested in mobile and UI development.</p>"},{"location":"#2-backend-development","title":"\ud83d\udda5 2. Backend Development","text":"<p>Use frameworks like:</p> <ul> <li>Shelf \u2013 lightweight and simple HTTP servers  </li> <li>dart_frog \u2013 modern backend framework inspired by Express.js  </li> <li>Alfred \u2013 minimal API server for Dart  </li> </ul> <p>Perfect if you want to build APIs, web servers, or full-stack Dart apps.</p>"},{"location":"#3-command-line-tools","title":"\u2699\ufe0f 3. Command-Line Tools","text":"<p>Dart can also create CLI utilities and scripts for automation, file management, and build pipelines \u2014 similar to Node.js scripts but with compiled performance.</p>"},{"location":"#choose-your-path","title":"\u2705 Choose Your Path","text":"<p>Your goal determines what to focus on while learning Dart.</p> Goal Focus Area \ud83e\udde9 App Development Core Dart + Flutter Framework \ud83d\udda5 Backend Development Dart Core + Shelf/dart_frog \u2699\ufe0f Command-Line Tools Dart Basics + File I/O + Packages <p>Pro Tip</p> <p>Many developers start with Dart + Flutter, then later expand into backend and full-stack Dart development.</p>"},{"location":"#summary","title":"\ud83d\udcda Summary","text":"<ul> <li>Dart is Google\u2019s fast, modern, and multi-purpose programming language.  </li> <li>It\u2019s used for building apps, servers, and command-line tools.  </li> <li>Learning Dart opens the door to Flutter and cross-platform development.  </li> <li>Your learning path depends on your goals \u2014 app, backend, or automation.</li> </ul>"},{"location":"#next-step","title":"\ud83d\ude80 Next Step","text":"<p>\ud83d\udc49 Proceed to Installation \u2192 Learn how to install the Dart SDK and set up your development environment.</p>   **Learn Dart \u2013 From Basics to Advanced**   Crafted with \u2764\ufe0f by **Muhammad Arshad**   [GitHub Repository \u2192](https://github.com/yourusername/learn-dart)"},{"location":"advanced/async-await/","title":"\u23f3 Async and Await in Dart","text":"<p>In Dart, <code>async</code> and <code>await</code> make it easy to write asynchronous (non-blocking) code \u2014 especially when working with APIs, files, or delays.</p>"},{"location":"advanced/async-await/#what-is-asynchronous-programming","title":"\ud83e\udde0 What is Asynchronous Programming?","text":"<p>Normally, Dart executes code line by line (synchronously). But some operations take time (like reading a file or fetching data from the internet). We don\u2019t want to block the program while waiting for them \u2014 that\u2019s where asynchronous code helps.</p>"},{"location":"advanced/async-await/#the-future-type","title":"\ud83d\udd39 The <code>Future</code> Type","text":"<p>A <code>Future</code> represents a value that will be available later.</p> <p>Example:</p> <pre><code>Future&lt;String&gt; getData() {\n  return Future.delayed(Duration(seconds: 2), () =&gt; 'Hello from Future!');\n}\n</code></pre> <p>This function doesn\u2019t return the string immediately. It returns a <code>Future</code> that completes after 2 seconds.</p>"},{"location":"advanced/async-await/#using-then","title":"\ud83d\udd39 Using <code>then()</code>","text":"<p>Before learning <code>await</code>, let\u2019s see how to handle Futures with <code>.then()</code>:</p> <pre><code>void main() {\n  getData().then((value) {\n    print(value);\n  });\n\n  print('Fetching data...');\n}\n</code></pre> <p>Output:</p> <pre><code>Fetching data...\nHello from Future!\n</code></pre> <p>The program doesn\u2019t wait \u2014 it continues executing.</p>"},{"location":"advanced/async-await/#using-async-and-await","title":"\u2699\ufe0f Using <code>async</code> and <code>await</code>","text":"<p>The <code>async</code> keyword tells Dart that a function is asynchronous, and <code>await</code> tells it to pause until the Future completes.</p> <pre><code>Future&lt;void&gt; main() async {\n  print('Fetching data...');\n  String data = await getData();\n  print(data);\n}\n</code></pre> <p>Output:</p> <pre><code>Fetching data...\nHello from Future!\n</code></pre> <p>Now the program waits at <code>await getData()</code> until the Future completes \u2014 but only this async function pauses, not the whole app.</p>"},{"location":"advanced/async-await/#async-function-rules","title":"\u26a1 Async Function Rules","text":"<ol> <li>Add <code>async</code> after the function signature.</li> <li>Use <code>await</code> only inside an <code>async</code> function.</li> <li><code>async</code> functions always return a <code>Future</code>, even if you return a simple value.</li> </ol> <p>Example:</p> <pre><code>Future&lt;int&gt; addAsync(int a, int b) async {\n  return a + b;\n}\n</code></pre>"},{"location":"advanced/async-await/#error-handling-with-try-catch","title":"\ud83d\udea8 Error Handling with <code>try / catch</code>","text":"<p>When using <code>await</code>, wrap calls in <code>try</code>\u2013<code>catch</code> to handle errors.</p> <pre><code>Future&lt;void&gt; main() async {\n  try {\n    String data = await fetchUserData();\n    print(data);\n  } catch (e) {\n    print('Error: $e');\n  }\n}\n\nFuture&lt;String&gt; fetchUserData() async {\n  throw Exception('Network error');\n}\n</code></pre> <p>Output:</p> <pre><code>Error: Exception: Network error\n</code></pre>"},{"location":"advanced/async-await/#multiple-awaits","title":"\ud83d\udd01 Multiple Awaits","text":"<p>You can <code>await</code> multiple async calls sequentially:</p> <pre><code>Future&lt;void&gt; main() async {\n  String user = await getUser();\n  String posts = await getPosts();\n  print('$user -&gt; $posts');\n}\n</code></pre> <p>Or run them in parallel with <code>Future.wait()</code>:</p> <pre><code>Future&lt;void&gt; main() async {\n  var results = await Future.wait([getUser(), getPosts()]);\n  print(results); // ['User data', 'Post data']\n}\n</code></pre>"},{"location":"advanced/async-await/#summary","title":"\u2705 Summary","text":"Concept Description <code>Future</code> Represents a value that will be available later <code>async</code> Marks a function as asynchronous <code>await</code> Waits for a Future to complete <code>try/catch</code> Handles async errors safely <code>Future.wait()</code> Runs multiple Futures in parallel"},{"location":"advanced/async-await/#quick-practice","title":"\ud83e\udde9 Quick Practice","text":"<pre><code>Future&lt;String&gt; downloadFile() async {\n  await Future.delayed(Duration(seconds: 1));\n  return 'File downloaded!';\n}\n\nFuture&lt;void&gt; main() async {\n  print('Starting...');\n  print(await downloadFile());\n  print('Done!');\n}\n</code></pre> <p>Expected Output:</p> <pre><code>Starting...\nFile downloaded!\nDone!\n</code></pre> <p>\ud83c\udfc1 You\u2019ve mastered the basics of asynchronous programming in Dart! Next: learn about Streams for handling continuous async data.</p>"},{"location":"advanced/futures/","title":"\u23f3 Dart Futures","text":"<p>A Future in Dart represents a value that will be available later \u2014 after some asynchronous operation completes. It\u2019s the building block of asynchronous programming in Dart.</p>"},{"location":"advanced/futures/#why-futures","title":"\ud83e\udde0 Why Futures?","text":"<p>Normally, Dart runs code synchronously (line by line). But some tasks \u2014 like reading a file or calling an API \u2014 take time. Instead of blocking, Dart uses Futures to handle these operations asynchronously.</p>"},{"location":"advanced/futures/#what-is-a-future","title":"\ud83d\udd0d What Is a Future?","text":"<p>A Future is like a promise that returns: - A value when the operation succeeds - An error if something goes wrong  </p> <p>Example:</p> <pre><code>Future&lt;String&gt; fetchUserName() async {\n  await Future.delayed(Duration(seconds: 2));\n  return 'Arshad';\n}\n\nvoid main() async {\n  print('Fetching...');\n  String name = await fetchUserName();\n  print('Hello, $name!');\n}\n</code></pre> <p>\ud83d\udd52 Output:</p> <pre><code>Fetching...\nHello, Arshad!\n</code></pre>"},{"location":"advanced/futures/#creating-futures","title":"\u2699\ufe0f Creating Futures","text":"<p>There are several ways to create a <code>Future</code>:</p> Type Example Immediate value <code>Future.value(10)</code> With delay <code>Future.delayed(Duration(seconds: 2), () =&gt; 42)</code> From async function <code>Future&lt;int&gt; getData() async =&gt; 123;</code> With computation <code>Future(() =&gt; heavyCalculation())</code> <p>Example:</p> <pre><code>Future&lt;int&gt; square(int n) async {\n  return n * n;\n}\n\nvoid main() async {\n  print(await square(4)); // 16\n}\n</code></pre>"},{"location":"advanced/futures/#using-then-catcherror-whencomplete","title":"\ud83e\udde9 Using <code>.then()</code>, <code>.catchError()</code>, <code>.whenComplete()</code>","text":"<p>Before <code>async/await</code>, Futures used callback chaining:</p> <pre><code>Future&lt;int&gt; getNumber() =&gt; Future.delayed(Duration(seconds: 1), () =&gt; 5);\n\nvoid main() {\n  getNumber()\n    .then((value) =&gt; print('Value: $value'))\n    .catchError((error) =&gt; print('Error: $error'))\n    .whenComplete(() =&gt; print('Done!'));\n}\n</code></pre> <p>\ud83e\uddfe Output:</p> <pre><code>Value: 5\nDone!\n</code></pre> <p>\u2705 Works fine \u2014 but <code>async/await</code> is much cleaner.</p>"},{"location":"advanced/futures/#using-async-and-await","title":"\u2728 Using <code>async</code> and <code>await</code>","text":"<p>You can write asynchronous code like synchronous code using <code>async</code> and <code>await</code>:</p> <pre><code>Future&lt;String&gt; getData() async {\n  await Future.delayed(Duration(seconds: 1));\n  return 'Data loaded';\n}\n\nvoid main() async {\n  print('Waiting...');\n  var data = await getData();\n  print(data);\n}\n</code></pre> <p>Output:</p> <pre><code>Waiting...\nData loaded\n</code></pre>"},{"location":"advanced/futures/#handling-errors","title":"\ud83d\udea8 Handling Errors","text":"<p>Use <code>try</code> / <code>catch</code> inside <code>async</code> functions:</p> <pre><code>Future&lt;String&gt; riskyOperation() async {\n  throw Exception('Something went wrong!');\n}\n\nvoid main() async {\n  try {\n    var result = await riskyOperation();\n    print(result);\n  } catch (e) {\n    print('Caught error: $e');\n  } finally {\n    print('Operation complete.');\n  }\n}\n</code></pre> <p>Output:</p> <pre><code>Caught error: Exception: Something went wrong!\nOperation complete.\n</code></pre>"},{"location":"advanced/futures/#running-multiple-futures","title":"\u23f2\ufe0f Running Multiple Futures","text":"<p>You can run multiple async tasks at the same time:</p>"},{"location":"advanced/futures/#1-using-futurewait","title":"1\ufe0f\u20e3 Using <code>Future.wait()</code>","text":"<p>Waits for all futures to complete.</p> <pre><code>void main() async {\n  var results = await Future.wait([\n    Future.delayed(Duration(seconds: 1), () =&gt; 'Task 1'),\n    Future.delayed(Duration(seconds: 2), () =&gt; 'Task 2'),\n  ]);\n  print(results); // [Task 1, Task 2]\n}\n</code></pre>"},{"location":"advanced/futures/#2-using-futureany","title":"2\ufe0f\u20e3 Using <code>Future.any()</code>","text":"<p>Returns the first future that completes.</p> <pre><code>void main() async {\n  var result = await Future.any([\n    Future.delayed(Duration(seconds: 2), () =&gt; 'Slow'),\n    Future.delayed(Duration(seconds: 1), () =&gt; 'Fast'),\n  ]);\n  print(result); // Fast\n}\n</code></pre>"},{"location":"advanced/futures/#common-future-methods","title":"\ud83e\uddf1 Common Future Methods","text":"Method Description Example <code>.then()</code> Run code after completion <code>future.then(print)</code> <code>.catchError()</code> Handle errors <code>future.catchError(print)</code> <code>.whenComplete()</code> Always run at end <code>future.whenComplete(() =&gt; print('done'))</code> <code>Future.wait()</code> Wait for many <code>await Future.wait([...])</code> <code>Future.any()</code> Take first result <code>await Future.any([...])</code>"},{"location":"advanced/futures/#future-vs-stream","title":"\ud83e\uddee Future vs Stream","text":"Feature Future Stream Returns One value Many values Completion Ends after one result Ends after many events Use case Fetch data once Continuous data flow Example HTTP request WebSocket messages"},{"location":"advanced/futures/#summary","title":"\ud83c\udfc1 Summary","text":"Concept Key Idea Future Represents a single async result async / await Simplifies async code Error handling <code>try / catch / finally</code> Parallel tasks <code>Future.wait()</code> &amp; <code>Future.any()</code> Streams For multiple async values"},{"location":"advanced/futures/#quick-practice","title":"\ud83c\udfaf Quick Practice","text":"<p>Write a function that simulates downloading two files, then prints \u201cAll downloads done!\u201d when both complete.</p> <pre><code>Future&lt;void&gt; download(String file) async {\n  print('Downloading $file...');\n  await Future.delayed(Duration(seconds: 2));\n  print('$file downloaded!');\n}\n\nvoid main() async {\n  await Future.wait([\n    download('file1.txt'),\n    download('file2.txt'),\n  ]);\n  print('All downloads done!');\n}\n</code></pre> <p>Output:</p> <pre><code>Downloading file1.txt...\nDownloading file2.txt...\nfile1.txt downloaded!\nfile2.txt downloaded!\nAll downloads done!\n</code></pre> <p>\u2705 You\u2019ve learned: - What Futures are and how they work - How to create, await, and handle errors - How to combine multiple async tasks - Difference between Futures and Streams  </p> <p>Next \u2192 Learn how Streams build on Futures to handle continuous asynchronous data.</p>"},{"location":"advanced/generics/","title":"\ud83e\udde9 Generics in Dart","text":"<p>Generics allow you to write flexible, reusable, and type-safe code. They let you define classes, methods, and collections that can work with any data type \u2014 while still catching type errors at compile time.</p>"},{"location":"advanced/generics/#why-use-generics","title":"\ud83d\udd0d Why Use Generics?","text":"<p>Without generics, you lose type safety:</p> <pre><code>List numbers = [1, 2, 3];\nnumbers.add('four'); // \u274c No compile-time error\n</code></pre> <p>With generics:</p> <pre><code>List&lt;int&gt; numbers = [1, 2, 3];\nnumbers.add('four'); // \u274c Compile-time error\n</code></pre> <p>\u2705 Generics help: - Prevent type-related bugs. - Make code reusable and consistent. - Improve readability and performance (no <code>dynamic</code> boxing).</p>"},{"location":"advanced/generics/#generic-collections","title":"\ud83e\uddf1 Generic Collections","text":"<p>All Dart collections (like <code>List</code>, <code>Set</code>, and <code>Map</code>) are generic.</p> <pre><code>List&lt;String&gt; names = ['Ali', 'Sara'];\nSet&lt;int&gt; ids = {1, 2, 3};\nMap&lt;String, int&gt; scores = {'Ali': 90, 'Sara': 95};\n</code></pre> <p>You can also use nested generics:</p> <pre><code>Map&lt;String, List&lt;int&gt;&gt; marks = {\n  'Ali': [80, 90],\n  'Sara': [85, 95],\n};\n</code></pre>"},{"location":"advanced/generics/#generic-classes","title":"\ud83e\uddf0 Generic Classes","text":"<p>You can create your own generic class using <code>&lt;T&gt;</code>:</p> <pre><code>class Box&lt;T&gt; {\n  T value;\n  Box(this.value);\n\n  void show() {\n    print('Value: $value');\n  }\n}\n\nvoid main() {\n  var intBox = Box&lt;int&gt;(10);\n  var strBox = Box&lt;String&gt;('Hello');\n\n  intBox.show(); // Output: Value: 10\n  strBox.show(); // Output: Value: Hello\n}\n</code></pre> <p>Here, <code>T</code> is a type parameter \u2014 you decide its actual type when creating an object.</p>"},{"location":"advanced/generics/#generic-functions","title":"\ud83d\udd27 Generic Functions","text":"<p>Functions can also be generic:</p> <pre><code>T pickFirst&lt;T&gt;(T a, T b) {\n  return a;\n}\n\nvoid main() {\n  print(pickFirst&lt;int&gt;(10, 20)); // 10\n  print(pickFirst&lt;String&gt;('Hi', 'Bye')); // Hi\n}\n</code></pre> <p>If Dart can infer the type, you don\u2019t need to specify it:</p> <pre><code>print(pickFirst('Hello', 'World')); // Automatically &lt;String&gt;\n</code></pre>"},{"location":"advanced/generics/#type-constraints-extends","title":"\ud83e\udded Type Constraints (<code>extends</code>)","text":"<p>You can restrict generic types using <code>extends</code>.</p> <p>Example: only allow numbers.</p> <pre><code>class Calculator&lt;T extends num&gt; {\n  T add(T a, T b) =&gt; (a + b) as T;\n}\n\nvoid main() {\n  var calc = Calculator&lt;int&gt;();\n  print(calc.add(10, 20)); // 30\n\n  // var bad = Calculator&lt;String&gt;(); \u274c Error: String is not a subtype of num\n}\n</code></pre>"},{"location":"advanced/generics/#multiple-type-parameters","title":"\ud83e\udde9 Multiple Type Parameters","text":"<p>You can define more than one generic type:</p> <pre><code>class Pair&lt;K, V&gt; {\n  K key;\n  V value;\n\n  Pair(this.key, this.value);\n}\n\nvoid main() {\n  var pair = Pair&lt;String, int&gt;('Age', 25);\n  print('${pair.key}: ${pair.value}');\n}\n</code></pre>"},{"location":"advanced/generics/#best-practices","title":"\ud83e\udde0 Best Practices","text":"<p>\u2705 Use generics when: - You work with collections or reusable components. - You want compile-time type checking.</p> <p>\ud83d\udeab Avoid overusing them when: - Simplicity is more important than flexibility. - You don\u2019t need multiple data types.</p>"},{"location":"advanced/generics/#summary","title":"\ud83e\uddfe Summary","text":"Concept Example Description Generic List <code>List&lt;int&gt;</code> Type-safe collection Generic Class <code>class Box&lt;T&gt;</code> Works with any type Generic Function <code>T getItem&lt;T&gt;()</code> Type-safe function Type Constraint <code>&lt;T extends num&gt;</code> Restrict types Multiple Parameters <code>&lt;K, V&gt;</code> For key\u2013value patterns <p>\ud83c\udfaf In short: Generics make Dart code type-safe, clean, and reusable \u2014 a must-know for advanced Dart programming.</p>"},{"location":"advanced/mixins-extensions/","title":"\ud83e\udde9 Mixins &amp; Extensions in Dart","text":"<p>In Dart, Mixins and Extensions allow you to reuse code and extend functionality without traditional inheritance. Let\u2019s explore both step-by-step \ud83d\udc47</p>"},{"location":"advanced/mixins-extensions/#1-mixins-reuse-code-across-classes","title":"\ud83e\uddf1 1. Mixins \u2014 Reuse Code Across Classes","text":""},{"location":"advanced/mixins-extensions/#what-is-a-mixin","title":"\ud83d\udd39 What is a Mixin?","text":"<p>A mixin is a class whose methods can be used by other classes without being their parent.</p> <p>You use the <code>with</code> keyword to add a mixin\u2019s behavior to a class.</p>"},{"location":"advanced/mixins-extensions/#example-using-a-mixin","title":"\u2705 Example: Using a Mixin","text":"<pre><code>mixin Logger {\n  void log(String message) {\n    print('LOG: $message');\n  }\n}\n\nclass Vehicle {\n  void start() =&gt; print('Vehicle started');\n}\n\nclass Car extends Vehicle with Logger {\n  void drive() {\n    log('Car is driving...');\n  }\n}\n\nvoid main() {\n  Car car = Car();\n  car.start();\n  car.drive();\n}\n</code></pre> <p>Output:</p> <pre><code>Vehicle started\nLOG: Car is driving...\n</code></pre>"},{"location":"advanced/mixins-extensions/#how-it-works","title":"\ud83e\udde0 How It Works","text":"<ul> <li>The <code>Car</code> class inherits methods from <code>Vehicle</code>.</li> <li>It also mixes in methods from <code>Logger</code> using <code>with</code>.</li> <li>This avoids deep inheritance chains.</li> </ul>"},{"location":"advanced/mixins-extensions/#mixin-rules","title":"\u2699\ufe0f Mixin Rules","text":"<ul> <li>A mixin cannot have a constructor.</li> <li>A mixin can be applied to multiple classes.</li> <li>Mixins can be restricted to certain types using <code>on</code>.</li> </ul>"},{"location":"advanced/mixins-extensions/#example-restricting-mixins","title":"Example: Restricting Mixins","text":"<pre><code>class Animal {\n  void move() =&gt; print('Animal is moving');\n}\n\nmixin Swimmer on Animal {\n  void swim() =&gt; print('Swimming...');\n}\n\nclass Fish extends Animal with Swimmer {}\n\nvoid main() {\n  Fish f = Fish();\n  f.move();\n  f.swim();\n}\n</code></pre> <p>The <code>Swimmer</code> mixin can only be used on classes that extend <code>Animal</code>.</p>"},{"location":"advanced/mixins-extensions/#2-extensions-add-features-to-existing-classes","title":"\ud83d\udd27 2. Extensions \u2014 Add Features to Existing Classes","text":""},{"location":"advanced/mixins-extensions/#what-is-an-extension","title":"\ud83d\udd39 What is an Extension?","text":"<p>An extension lets you add new methods or getters to an existing class without modifying it.</p> <p>This is helpful for built-in classes (like <code>String</code>, <code>int</code>, etc.) or third-party types.</p>"},{"location":"advanced/mixins-extensions/#example-add-method-to-string","title":"\u2705 Example: Add Method to String","text":"<pre><code>extension StringUtils on String {\n  bool get isPalindrome {\n    String clean = replaceAll(' ', '').toLowerCase();\n    return clean == clean.split('').reversed.join('');\n  }\n}\n\nvoid main() {\n  print('level'.isPalindrome); // true\n  print('hello'.isPalindrome); // false\n}\n</code></pre> <p>Now every <code>String</code> object has an <code>.isPalindrome</code> property!</p>"},{"location":"advanced/mixins-extensions/#example-extension-with-functions","title":"\u2699\ufe0f Example: Extension with Functions","text":"<pre><code>extension NumberUtils on int {\n  bool get isEvenNumber =&gt; this % 2 == 0;\n\n  int square() =&gt; this * this;\n}\n\nvoid main() {\n  print(4.isEvenNumber); // true\n  print(5.square());     // 25\n}\n</code></pre>"},{"location":"advanced/mixins-extensions/#naming-extensions","title":"\ud83d\udca1 Naming Extensions","text":"<p>You can give your extensions names (recommended for large projects):</p> <pre><code>extension FancyStringUtils on String { ... }\n</code></pre> <p>Then, if name conflicts occur (e.g., two extensions define the same method), you can call it explicitly:</p> <pre><code>FancyStringUtils('dart').isPalindrome;\n</code></pre>"},{"location":"advanced/mixins-extensions/#mixins-vs-extensions-quick-comparison","title":"\ud83e\udded Mixins vs Extensions \u2014 Quick Comparison","text":"Feature Mixins Extensions Purpose Reuse behavior in classes Add new features to existing types Keyword <code>with</code> <code>extension</code> Can have state? \u2705 Yes (fields, methods) \u274c No (only methods/getters/setters) Constructors allowed? \u274c No \u274c No Example use <code>with Logger</code> <code>myString.isPalindrome</code>"},{"location":"advanced/mixins-extensions/#summary","title":"\ud83e\udde9 Summary","text":"<ul> <li>Mixins \u2192 Reuse methods across multiple classes.   \u2192 Use <code>mixin</code> + <code>with</code>.</li> <li>Extensions \u2192 Add functionality to existing types.   \u2192 Use <code>extension</code> + <code>on</code>.</li> </ul> <p>Both are powerful tools for writing clean, reusable, and scalable Dart code \ud83d\ude80</p> <p>\u2705 Next Step: Learn about Generics \u2192 how to write flexible, type-safe Dart code.</p>"},{"location":"advanced/streams/","title":"\ud83d\udca7 Dart Streams","text":"<p>Streams in Dart are used to handle asynchronous data \u2014 values that arrive over time. They\u2019re like \u201cpipes\u201d that deliver data chunks (events) one after another.</p>"},{"location":"advanced/streams/#why-streams","title":"\ud83e\udde0 Why Streams?","text":"<ul> <li>Use <code>Future</code> for a single async value.  </li> <li>Use <code>Stream</code> for multiple async values.</li> </ul> <p>\ud83d\udc49 Example: Reading user input, listening to file downloads, or receiving messages from a server.</p>"},{"location":"advanced/streams/#stream-basics","title":"\ud83e\udde9 Stream Basics","text":"<p>A stream delivers: - Data events \u2192 actual values - Error events \u2192 exceptions - Done event \u2192 when no more data will come</p> <p>Example:</p> <pre><code>Stream&lt;int&gt; numberStream() async* {\n  for (int i = 1; i &lt;= 3; i++) {\n    await Future.delayed(Duration(seconds: 1));\n    yield i;\n  }\n}\n\nvoid main() async {\n  await for (var num in numberStream()) {\n    print('Received: $num');\n  }\n}\n</code></pre> <p>\ud83d\udce4 Output:</p> <pre><code>Received: 1\nReceived: 2\nReceived: 3\n</code></pre>"},{"location":"advanced/streams/#stream-types","title":"\u2699\ufe0f Stream Types","text":"Type Description Single-subscription Stream Listened to only once (default) Broadcast Stream Can have multiple listeners <p>Example:</p> <pre><code>var stream = Stream&lt;int&gt;.periodic(\n  Duration(seconds: 1),\n  (count) =&gt; count,\n).take(3);\n\nstream.listen((value) =&gt; print('First: $value'));\nstream.listen((value) =&gt; print('Second: $value')); // \u274c Error (single)\n</code></pre> <p>\u2705 Fix with broadcast:</p> <pre><code>var broadcast = stream.asBroadcastStream();\nbroadcast.listen((v) =&gt; print('First: $v'));\nbroadcast.listen((v) =&gt; print('Second: $v'));\n</code></pre>"},{"location":"advanced/streams/#streamcontroller","title":"\ud83d\udd04 StreamController","text":"<p>You can create custom streams using <code>StreamController</code>.</p> <pre><code>import 'dart:async';\n\nvoid main() {\n  final controller = StreamController&lt;String&gt;();\n\n  controller.stream.listen(\n    (data) =&gt; print('Data: $data'),\n    onError: (err) =&gt; print('Error: $err'),\n    onDone: () =&gt; print('Stream closed'),\n  );\n\n  controller.add('Hello');\n  controller.add('World');\n  controller.addError('Oops!');\n  controller.close();\n}\n</code></pre>"},{"location":"advanced/streams/#stream-operations","title":"\ud83e\uddf1 Stream Operations","text":"<p>Streams have powerful methods to transform data:</p> Method Example <code>map()</code> <code>stream.map((e) =&gt; e * 2)</code> <code>where()</code> <code>stream.where((e) =&gt; e.isEven)</code> <code>take(n)</code> <code>stream.take(3)</code> <code>skip(n)</code> <code>stream.skip(2)</code> <code>toList()</code> <code>await stream.toList()</code> <p>Example:</p> <pre><code>final stream = Stream.fromIterable([1, 2, 3, 4, 5]);\n\nawait for (var n in stream.where((n) =&gt; n.isEven).map((n) =&gt; n * 10)) {\n  print(n);\n}\n</code></pre> <p>Output:</p> <pre><code>20\n40\n</code></pre>"},{"location":"advanced/streams/#common-stream-sources","title":"\ud83e\uddf0 Common Stream Sources","text":"Use Case Example From list <code>Stream.fromIterable([1,2,3])</code> Periodic <code>Stream.periodic(Duration(seconds: 1), (count) =&gt; count)</code> Controller <code>StreamController()</code> Async generator <code>async*</code> with <code>yield</code>"},{"location":"advanced/streams/#combining-streams","title":"\ud83e\udde9 Combining Streams","text":"<p>You can merge or transform streams using packages like <code>rxdart</code>:</p> <pre><code>import 'package:rxdart/rxdart.dart';\n\nvoid main() {\n  final s1 = Stream.value(1);\n  final s2 = Stream.value(2);\n\n  Rx.merge([s1, s2]).listen(print); // 1, 2\n}\n</code></pre>"},{"location":"advanced/streams/#summary","title":"\ud83c\udfc1 Summary","text":"Concept Key Idea Stream Asynchronous sequence of events StreamController Manually manage stream data await for Asynchronously consume stream data Broadcast Stream Multiple listeners Transformations Use <code>map</code>, <code>where</code>, etc."},{"location":"advanced/streams/#quick-practice","title":"\ud83c\udfaf Quick Practice","text":"<p>Create a stream that emits numbers from 1\u20135 every second, doubles them, and stops when done.</p> <pre><code>Stream&lt;int&gt; doubledNumbers() async* {\n  for (int i = 1; i &lt;= 5; i++) {\n    await Future.delayed(Duration(seconds: 1));\n    yield i * 2;\n  }\n}\n\nvoid main() async {\n  await for (var num in doubledNumbers()) {\n    print(num);\n  }\n}\n</code></pre> <p>Output:</p> <pre><code>2\n4\n6\n8\n10\n</code></pre> <p>\u2705 You\u2019ve learned: - What streams are and why they\u2019re useful - How to create, listen, and transform them - How to use <code>StreamController</code> and broadcast streams  </p> <p>Next up \u2192 Learn about Futures vs Streams and how to integrate both efficiently.</p>"},{"location":"core/classes/","title":"\ud83e\uddf1 Dart Classes and Object-Oriented Programming (OOP)","text":"<p>Dart is an object-oriented language, meaning everything is an object \u2014 even numbers and functions. Objects are created from classes, which define how they look and behave.</p>"},{"location":"core/classes/#what-is-a-class","title":"\ud83e\udde9 What is a Class?","text":"<p>A class is a blueprint for creating objects (instances).</p> <pre><code>class Person {\n  String name;\n  int age;\n\n  // Constructor\n  Person(this.name, this.age);\n\n  // Method\n  void introduce() {\n    print('Hi, I\\'m $name and I\\'m $age years old.');\n  }\n}\n\nvoid main() {\n  var p1 = Person('Arshad', 25);\n  p1.introduce();\n}\n</code></pre>"},{"location":"core/classes/#output","title":"\u2705 Output","text":"<pre><code>Hi, I'm Arshad and I'm 25 years old.\n</code></pre>"},{"location":"core/classes/#constructors","title":"\ud83c\udfd7\ufe0f Constructors","text":"<p>Constructors create new objects. There are several types:</p>"},{"location":"core/classes/#1-default-constructor","title":"1. Default Constructor","text":"<pre><code>class Car {\n  String brand;\n  Car(this.brand);\n}\n</code></pre>"},{"location":"core/classes/#2-named-constructor","title":"2. Named Constructor","text":"<pre><code>class Car {\n  String brand;\n  Car(this.brand);\n  Car.electric() {\n    brand = 'Tesla';\n  }\n}\n</code></pre>"},{"location":"core/classes/#3-redirecting-constructor","title":"3. Redirecting Constructor","text":"<pre><code>class Car {\n  String brand;\n  Car(this.brand);\n  Car.defaultBrand() : this('Toyota');\n}\n</code></pre>"},{"location":"core/classes/#4-constant-constructor-for-immutable-objects","title":"4. Constant Constructor (for immutable objects)","text":"<pre><code>class Point {\n  final int x, y;\n  const Point(this.x, this.y);\n}\n</code></pre>"},{"location":"core/classes/#instance-variables-methods","title":"\ud83e\uddf1 Instance Variables &amp; Methods","text":"<p>Instance variables belong to objects.</p> <pre><code>class Dog {\n  String name;\n  void bark() =&gt; print('$name says woof!');\n}\n</code></pre>"},{"location":"core/classes/#getters-and-setters","title":"\u2699\ufe0f Getters and Setters","text":"<p>They control access to private variables (<code>_variable</code>).</p> <pre><code>class BankAccount {\n  double _balance = 0;\n\n  double get balance =&gt; _balance;\n  set deposit(double amount) =&gt; _balance += amount;\n}\n</code></pre>"},{"location":"core/classes/#static-members","title":"\ud83e\uddf0 Static Members","text":"<p>Used when a variable or method belongs to the class, not objects.</p> <pre><code>class MathUtil {\n  static const pi = 3.1416;\n  static double square(num n) =&gt; n * n;\n}\n\nvoid main() {\n  print(MathUtil.square(5));\n}\n</code></pre>"},{"location":"core/classes/#inheritance","title":"\ud83e\uddec Inheritance","text":"<p>Classes can inherit from other classes using <code>extends</code>.</p> <pre><code>class Animal {\n  void eat() =&gt; print('Animal eats');\n}\n\nclass Dog extends Animal {\n  void bark() =&gt; print('Dog barks');\n}\n\nvoid main() {\n  var d = Dog();\n  d.eat();\n  d.bark();\n}\n</code></pre>"},{"location":"core/classes/#method-overriding","title":"\ud83d\udd01 Method Overriding","text":"<p>You can override parent methods using <code>@override</code>.</p> <pre><code>class Animal {\n  void sound() =&gt; print('Some sound');\n}\n\nclass Cat extends Animal {\n  @override\n  void sound() =&gt; print('Meow!');\n}\n</code></pre>"},{"location":"core/classes/#super-keyword","title":"\ud83e\udde9 Super Keyword","text":"<p>Used to access the parent class.</p> <pre><code>class Vehicle {\n  Vehicle() {\n    print('Vehicle created');\n  }\n}\n\nclass Car extends Vehicle {\n  Car() : super() {\n    print('Car created');\n  }\n}\n</code></pre>"},{"location":"core/classes/#abstract-classes","title":"\ud83e\udde0 Abstract Classes","text":"<p>Used as blueprints that cannot be instantiated directly.</p> <pre><code>abstract class Shape {\n  void draw(); // abstract method\n}\n\nclass Circle extends Shape {\n  @override\n  void draw() =&gt; print('Drawing circle');\n}\n</code></pre>"},{"location":"core/classes/#interfaces","title":"\u26a1 Interfaces","text":"<p>All classes implicitly define an interface. Use <code>implements</code> to enforce behavior.</p> <pre><code>class Printer {\n  void printDoc() {}\n}\n\nclass HPPrinter implements Printer {\n  @override\n  void printDoc() =&gt; print('Printing document...');\n}\n</code></pre>"},{"location":"core/classes/#mixins","title":"\ud83e\udde9 Mixins","text":"<p>Mixins let you reuse code across multiple classes.</p> <pre><code>mixin Swimmer {\n  void swim() =&gt; print('Can swim');\n}\n\nclass Fish with Swimmer {}\nclass Human with Swimmer {}\n</code></pre>"},{"location":"core/classes/#enums-with-classes","title":"\ud83e\uddf0 Enums with Classes","text":"<p>Enums define constant sets of values.</p> <pre><code>enum Status { success, failure, loading }\n\nclass Response {\n  final Status status;\n  Response(this.status);\n}\n</code></pre>"},{"location":"core/classes/#object-class-base-class-of-all","title":"\ud83e\uddf1 Object Class (Base Class of All)","text":"<p>All Dart classes inherit from <code>Object</code>, which provides: - <code>toString()</code> - <code>hashCode</code> - <code>==</code> (can be overridden)</p> <pre><code>class User {\n  String name;\n  User(this.name);\n\n  @override\n  String toString() =&gt; 'User(name: $name)';\n}\n</code></pre>"},{"location":"core/classes/#summary","title":"\ud83e\udde0 Summary","text":"Concept Description Keyword Class Blueprint for objects <code>class</code> Object Instance of class <code>new</code> (optional) Inheritance Reuse from parent class <code>extends</code> Interface Defines contract <code>implements</code> Abstract Blueprint only <code>abstract</code> Mixin Share reusable code <code>mixin</code>, <code>with</code> Static Belongs to class <code>static</code>"},{"location":"core/classes/#quick-practice","title":"\ud83e\udde9 Quick Practice","text":"<p>Try this mini challenge \ud83d\udc47</p> <pre><code>abstract class Animal {\n  void makeSound();\n}\n\nmixin Runner {\n  void run() =&gt; print('Running fast!');\n}\n\nclass Dog extends Animal with Runner {\n  @override\n  void makeSound() =&gt; print('Woof!');\n}\n\nvoid main() {\n  var d = Dog();\n  d.makeSound();\n  d.run();\n}\n</code></pre> <p>\u2705 Output:</p> <pre><code>Woof!\nRunning fast!\n</code></pre> <p>\ud83d\udd0d Next step: Learn about asynchronous programming (Futures, async, await) in Dart.</p>"},{"location":"core/collections/","title":"\ud83e\uddfa Dart Collections","text":"<p>Collections in Dart are used to store and manage groups of objects. The main types are:</p> <ul> <li>List \u2192 ordered, indexed collection  </li> <li>Set \u2192 unordered, unique items  </li> <li>Map \u2192 key-value pairs  </li> <li>Queue \u2192 double-ended structure (from <code>dart:collection</code>)</li> </ul>"},{"location":"core/collections/#1-lists","title":"\ud83d\udccb 1. Lists","text":"<p>A List is an ordered collection of items (like arrays in other languages).</p> <pre><code>void main() {\n  // Fixed-length list\n  var fixedList = List&lt;int&gt;.filled(3, 0);\n  fixedList[0] = 10;\n\n  // Growable list\n  var numbers = [1, 2, 3];\n  numbers.add(4);\n  numbers.remove(2);\n\n  print(numbers); // [1, 3, 4]\n  print(numbers.length); // 3\n}\n</code></pre>"},{"location":"core/collections/#common-list-methods","title":"Common List Methods","text":"Method Description <code>add(value)</code> Add single element <code>addAll([...])</code> Add multiple elements <code>remove(value)</code> Remove by value <code>removeAt(index)</code> Remove by index <code>contains(value)</code> Check if value exists <code>sort()</code> Sort elements <code>reversed</code> Reverse order"},{"location":"core/collections/#2-sets","title":"\ud83e\udde9 2. Sets","text":"<p>A Set stores unique values and has no index.</p> <pre><code>void main() {\n  var fruits = {'apple', 'banana', 'orange'};\n  fruits.add('banana'); // duplicate ignored\n  fruits.remove('apple');\n\n  print(fruits); // {banana, orange}\n  print(fruits.contains('orange')); // true\n}\n</code></pre>"},{"location":"core/collections/#common-set-methods","title":"Common Set Methods","text":"Method Description <code>add(value)</code> Add single item <code>remove(value)</code> Remove item <code>contains(value)</code> Check existence <code>union(otherSet)</code> Combine sets <code>intersection(otherSet)</code> Common items <code>difference(otherSet)</code> Unique items in current set"},{"location":"core/collections/#3-maps","title":"\ud83d\uddfa\ufe0f 3. Maps","text":"<p>A Map stores key\u2013value pairs. Keys must be unique; values can repeat.</p> <pre><code>void main() {\n  var user = {\n    'name': 'Arshad',\n    'age': 22,\n    'country': 'Pakistan'\n  };\n\n  user['email'] = 'arshad@example.com';\n  user.remove('age');\n\n  print(user['name']); // Arshad\n  print(user.keys); // (name, country, email)\n  print(user.values); // (Arshad, Pakistan, arshad@example.com)\n}\n</code></pre>"},{"location":"core/collections/#common-map-methods","title":"Common Map Methods","text":"Method Description <code>keys</code> / <code>values</code> Return all keys or values <code>addAll({...})</code> Add multiple pairs <code>remove(key)</code> Remove entry by key <code>containsKey(key)</code> Check if key exists <code>forEach((k, v) {})</code> Loop through entries"},{"location":"core/collections/#4-queues","title":"\ud83d\udd01 4. Queues","text":"<p>A Queue allows adding/removing items from both ends. You need to import it:</p> <pre><code>import 'dart:collection';\n\nvoid main() {\n  Queue&lt;String&gt; queue = Queue.from(['A', 'B', 'C']);\n\n  queue.addFirst('Start');\n  queue.addLast('End');\n  queue.removeFirst();\n\n  print(queue); // (B, C, End)\n}\n</code></pre>"},{"location":"core/collections/#common-queue-methods","title":"Common Queue Methods","text":"Method Description <code>add(value)</code> / <code>addAll([...])</code> Add at end <code>addFirst(value)</code> Add at start <code>addLast(value)</code> Add at end <code>removeFirst()</code> / <code>removeLast()</code> Remove from start/end <code>clear()</code> Remove all elements"},{"location":"core/collections/#bonus-collection-operations","title":"\ud83e\udde0 Bonus: Collection Operations","text":"<p>Dart collections support functional-style methods like:</p> <pre><code>void main() {\n  var numbers = [1, 2, 3, 4, 5];\n\n  var doubled = numbers.map((n) =&gt; n * 2);\n  var evens = numbers.where((n) =&gt; n.isEven);\n  var sum = numbers.reduce((a, b) =&gt; a + b);\n\n  print(doubled.toList()); // [2, 4, 6, 8, 10]\n  print(evens.toList()); // [2, 4]\n  print(sum); // 15\n}\n</code></pre>"},{"location":"core/collections/#useful-methods","title":"Useful Methods","text":"Method Description <code>map()</code> Transform each element <code>where()</code> Filter elements <code>reduce()</code> Combine into one value <code>any()</code> / <code>every()</code> Test conditions <code>forEach()</code> Loop over collection"},{"location":"core/collections/#summary","title":"\u2705 Summary","text":"Type Ordered Unique Key\u2013Value Import Needed List \u2705 \u274c \u274c No Set \u274c \u2705 \u274c No Map \u274c \u2705 (keys) \u2705 No Queue \u2705 \u274c \u274c \u2705 (<code>dart:collection</code>) <p>\ud83c\udfaf Next Step: Try practicing by building small programs that use these collections \u2014 like: - A todo list (using <code>List</code>) - A contact book (using <code>Map</code>) - A unique tag system (using <code>Set</code>) - A task processor (using <code>Queue</code>)</p>"},{"location":"core/control-flow/","title":"\ud83d\udd04 Control Flow in Dart","text":"<p>Control flow statements decide how your program executes \u2014 whether it repeats actions, skips sections, or makes decisions.</p>"},{"location":"core/control-flow/#1-conditional-statements","title":"\ud83e\udde0 1. Conditional Statements","text":""},{"location":"core/control-flow/#if-else-if-else","title":"<code>if</code> / <code>else if</code> / <code>else</code>","text":"<p>Used to execute code based on conditions.</p> <pre><code>void main() {\n  int age = 20;\n\n  if (age &gt;= 18) {\n    print('You are an adult.');\n  } else if (age &gt; 13) {\n    print('You are a teenager.');\n  } else {\n    print('You are a child.');\n  }\n}\n</code></pre> <p>\ud83d\udca1 Tip: Conditions in Dart must return a <code>bool</code>.</p>"},{"location":"core/control-flow/#2-loops","title":"\ud83d\udd01 2. Loops","text":""},{"location":"core/control-flow/#for-loop","title":"<code>for</code> Loop","text":"<p>Used when you know how many times to repeat.</p> <pre><code>void main() {\n  for (int i = 1; i &lt;= 5; i++) {\n    print('Count: $i');\n  }\n}\n</code></pre>"},{"location":"core/control-flow/#for-in-loop","title":"<code>for-in</code> Loop","text":"<p>Used to iterate over collections like lists.</p> <pre><code>void main() {\n  var fruits = ['apple', 'banana', 'mango'];\n  for (var fruit in fruits) {\n    print(fruit);\n  }\n}\n</code></pre>"},{"location":"core/control-flow/#while-loop","title":"<code>while</code> Loop","text":"<p>Repeats while a condition is true.</p> <pre><code>void main() {\n  int count = 1;\n  while (count &lt;= 3) {\n    print('While loop: $count');\n    count++;\n  }\n}\n</code></pre>"},{"location":"core/control-flow/#do-while-loop","title":"<code>do-while</code> Loop","text":"<p>Runs at least once, even if the condition is false.</p> <pre><code>void main() {\n  int num = 3;\n  do {\n    print('Number: $num');\n    num--;\n  } while (num &gt; 0);\n}\n</code></pre>"},{"location":"core/control-flow/#3-break-and-continue","title":"\ud83e\udded 3. <code>break</code> and <code>continue</code>","text":"<ul> <li><code>break</code> exits a loop immediately.  </li> <li><code>continue</code> skips the current iteration.</li> </ul> <pre><code>void main() {\n  for (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) continue; // skip 3\n    if (i == 5) break;    // stop at 5\n    print(i);\n  }\n}\n</code></pre>"},{"location":"core/control-flow/#4-switch-statement","title":"\u2699\ufe0f 4. <code>switch</code> Statement","text":"<p>Used when comparing one variable to multiple values.</p> <pre><code>void main() {\n  String grade = 'B';\n\n  switch (grade) {\n    case 'A':\n      print('Excellent!');\n      break;\n    case 'B':\n      print('Good job!');\n      break;\n    case 'C':\n      print('You passed.');\n      break;\n    default:\n      print('Invalid grade.');\n  }\n}\n</code></pre> <p>\ud83d\udca1 Note: Each case must end with <code>break</code>, <code>return</code>, or <code>continue</code> (to prevent fall-through).</p>"},{"location":"core/control-flow/#5-assert-statement","title":"\ud83e\udde9 5. <code>assert</code> Statement","text":"<p>Used for debug checks \u2014 throws an error if the condition is false.</p> <pre><code>void main() {\n  int age = 15;\n  assert(age &gt;= 18, 'Age must be at least 18!');\n  print('Adult verified.');\n}\n</code></pre> <p>\u2705 Runs only in debug mode, not in production.</p>"},{"location":"core/control-flow/#6-exception-handling-try-catch-finally","title":"\ud83d\udee0\ufe0f 6. Exception Handling (<code>try</code>, <code>catch</code>, <code>finally</code>)","text":"<p>Handle runtime errors gracefully.</p> <pre><code>void main() {\n  try {\n    int result = 10 ~/ 0; // division by zero\n  } catch (e) {\n    print('Error: $e');\n  } finally {\n    print('This always runs.');\n  }\n}\n</code></pre>"},{"location":"core/control-flow/#summary","title":"\ud83d\ude80 Summary","text":"Concept Purpose <code>if / else</code> Decision making <code>for / while / do-while</code> Repetition <code>break / continue</code> Loop control <code>switch</code> Multi-branch decision <code>assert</code> Debug validation <code>try-catch-finally</code> Error handling <p>Next: Functions in Dart \u2192</p>"},{"location":"core/functions/","title":"\ud83e\udde9 Dart Functions","text":"<p>Functions are blocks of code that perform a specific task. They help make code reusable, organized, and readable.</p>"},{"location":"core/functions/#1-defining-a-function","title":"\ud83d\udd39 1. Defining a Function","text":"<pre><code>void greet() {\n  print('Hello, Dart!');\n}\n</code></pre> <ul> <li><code>void</code> \u2192 return type (means it returns nothing)</li> <li><code>greet()</code> \u2192 function name</li> <li><code>{ ... }</code> \u2192 function body</li> </ul>"},{"location":"core/functions/#calling-a-function","title":"Calling a Function","text":"<pre><code>greet(); // Output: Hello, Dart!\n</code></pre>"},{"location":"core/functions/#2-function-with-parameters","title":"\ud83d\udd39 2. Function with Parameters","text":"<pre><code>void greetUser(String name) {\n  print('Hello, $name!');\n}\n\ngreetUser('Arshad'); // Output: Hello, Arshad!\n</code></pre>"},{"location":"core/functions/#3-function-with-return-value","title":"\ud83d\udd39 3. Function with Return Value","text":"<pre><code>int add(int a, int b) {\n  return a + b;\n}\n\nvoid main() {\n  print(add(3, 5)); // Output: 8\n}\n</code></pre>"},{"location":"core/functions/#4-arrow-functions","title":"\ud83d\udd39 4. Arrow (=&gt;) Functions","text":"<p>For short functions, Dart provides a concise syntax.</p> <pre><code>int square(int n) =&gt; n * n;\nString greet(String name) =&gt; 'Hello, $name!';\n</code></pre>"},{"location":"core/functions/#5-optional-default-parameters","title":"\ud83d\udd39 5. Optional &amp; Default Parameters","text":""},{"location":"core/functions/#positional-optional-parameters","title":"\u27a4 Positional Optional Parameters","text":"<p>Use square brackets <code>[ ]</code>:</p> <pre><code>void showInfo(String name, [int? age]) {\n  print('Name: $name');\n  if (age != null) print('Age: $age');\n}\n\nshowInfo('Ali');\nshowInfo('Ali', 22);\n</code></pre>"},{"location":"core/functions/#named-optional-parameters","title":"\u27a4 Named Optional Parameters","text":"<p>Use curly braces <code>{ }</code>:</p> <pre><code>void userInfo({String? name, int? age}) {\n  print('Name: $name, Age: $age');\n}\n\nuserInfo(name: 'Ayesha', age: 25);\n</code></pre>"},{"location":"core/functions/#default-values","title":"\u27a4 Default Values","text":"<pre><code>void greet({String name = 'Guest'}) {\n  print('Welcome, $name!');\n}\n\ngreet();           // Welcome, Guest!\ngreet(name: 'Ali'); // Welcome, Ali!\n</code></pre>"},{"location":"core/functions/#6-anonymous-functions-lambdas","title":"\ud83d\udd39 6. Anonymous Functions (Lambdas)","text":"<p>Functions without a name \u2014 often used in callbacks.</p> <pre><code>var numbers = [1, 2, 3];\nnumbers.forEach((num) {\n  print(num * 2);\n});\n</code></pre> <p>Or using arrow syntax:</p> <pre><code>numbers.forEach((num) =&gt; print(num * 2));\n</code></pre>"},{"location":"core/functions/#7-higher-order-functions","title":"\ud83d\udd39 7. Higher-Order Functions","text":"<p>A higher-order function takes another function as a parameter or returns one.</p> <pre><code>void process(int n, Function func) {\n  print(func(n));\n}\n\nint doubleIt(int n) =&gt; n * 2;\n\nprocess(5, doubleIt); // Output: 10\n</code></pre>"},{"location":"core/functions/#8-lexical-scope-closures","title":"\ud83d\udd39 8. Lexical Scope &amp; Closures","text":"<p>Functions can access variables from the outer scope.</p> <pre><code>Function makeAdder(int addBy) {\n  return (int i) =&gt; i + addBy;\n}\n\nvar add2 = makeAdder(2);\nprint(add2(5)); // Output: 7\n</code></pre>"},{"location":"core/functions/#9-anonymous-arrow-function-example","title":"\ud83d\udd39 9. Anonymous + Arrow Function Example","text":"<pre><code>List&lt;int&gt; nums = [1, 2, 3, 4];\nvar doubled = nums.map((n) =&gt; n * 2);\nprint(doubled.toList()); // [2, 4, 6, 8]\n</code></pre>"},{"location":"core/functions/#10-main-function","title":"\ud83d\udd39 10. Main Function","text":"<p>Every Dart program starts from the <code>main()</code> function.</p> <pre><code>void main() {\n  print('Program started!');\n}\n</code></pre>"},{"location":"core/functions/#summary","title":"\ud83e\udde0 Summary","text":"Type Example Notes Basic <code>void greet() {}</code> No parameters or return value With Params <code>void greet(String name)</code> Accepts input Return <code>int add(int a, int b)</code> Returns value Arrow <code>int square(int n) =&gt; n * n;</code> Short syntax Optional <code>void info([int? age])</code> Optional arguments Named <code>void info({String? name})</code> Named args Higher-order <code>process(5, doubleIt)</code> Pass/return functions Closure <code>makeAdder(2)</code> Keeps access to outer scope <p>\u2705 Next Step: Learn about async functions and <code>Future</code>, <code>await</code>, <code>async</code> in Dart (for asynchronous programming).</p>"},{"location":"core/operators/","title":"\ud83e\uddee Dart Operators","text":"<p>Operators in Dart are special symbols used to perform operations on variables and values.</p>"},{"location":"core/operators/#1-arithmetic-operators","title":"1. Arithmetic Operators","text":"<p>Used to perform basic mathematical operations.</p> Operator Description Example Result <code>+</code> Addition <code>10 + 5</code> <code>15</code> <code>-</code> Subtraction <code>10 - 5</code> <code>5</code> <code>*</code> Multiplication <code>10 * 5</code> <code>50</code> <code>/</code> Division (returns double) <code>10 / 3</code> <code>3.3333</code> <code>~/</code> Integer Division <code>10 ~/ 3</code> <code>3</code> <code>%</code> Modulus (remainder) <code>10 % 3</code> <code>1</code> <pre><code>void main() {\n  var a = 10, b = 3;\n  print(a + b);   // 13\n  print(a ~/ b);  // 3\n  print(a % b);   // 1\n}\n</code></pre>"},{"location":"core/operators/#2-relational-operators","title":"2. Relational Operators","text":"<p>Used to compare two values (result is <code>true</code> or <code>false</code>).</p> Operator Description Example Result <code>==</code> Equal to <code>5 == 5</code> <code>true</code> <code>!=</code> Not equal to <code>5 != 3</code> <code>true</code> <code>&gt;</code> Greater than <code>5 &gt; 3</code> <code>true</code> <code>&lt;</code> Less than <code>5 &lt; 3</code> <code>false</code> <code>&gt;=</code> Greater than or equal to <code>5 &gt;= 5</code> <code>true</code> <code>&lt;=</code> Less than or equal to <code>3 &lt;= 5</code> <code>true</code> <pre><code>void main() {\n  var x = 5, y = 3;\n  print(x &gt; y);  // true\n}\n</code></pre>"},{"location":"core/operators/#3-logical-operators","title":"3. Logical Operators","text":"<p>Used to combine conditional expressions.</p> Operator Description Example Result <code>&amp;&amp;</code> Logical AND <code>(x &gt; 0 &amp;&amp; y &gt; 0)</code> true if both are true <code>||</code> Logical OR <code>(x &gt; 0 || y &gt; 0)</code> true if any one is true <code>!</code> Logical NOT <code>!(x &gt; 0)</code> reverses the result <pre><code>void main() {\n  var x = 5, y = -2;\n  print(x &gt; 0 &amp;&amp; y &gt; 0); // false\n  print(x &gt; 0 || y &gt; 0); // true\n  print(!(x &gt; 0));       // false\n}\n</code></pre>"},{"location":"core/operators/#4-assignment-operators","title":"4. Assignment Operators","text":"<p>Used to assign values to variables.</p> Operator Example Meaning <code>=</code> <code>a = 5</code> Assigns 5 to a <code>+=</code> <code>a += 2</code> a = a + 2 <code>-=</code> <code>a -= 2</code> a = a - 2 <code>*=</code> <code>a *= 2</code> a = a * 2 <code>/=</code> <code>a /= 2</code> a = a / 2 <code>~/=</code> <code>a ~/= 2</code> a = a ~/ 2 <pre><code>void main() {\n  var n = 10;\n  n += 5;\n  print(n); // 15\n}\n</code></pre>"},{"location":"core/operators/#5-type-test-operators","title":"5. Type Test Operators","text":"<p>Used to check object types.</p> Operator Description Example <code>is</code> Returns true if object is of a specified type <code>x is int</code> <code>is!</code> Returns true if object is not of a specified type <code>x is! String</code> <pre><code>void main() {\n  var name = \"Dart\";\n  print(name is String); // true\n  print(name is! int);   // true\n}\n</code></pre>"},{"location":"core/operators/#6-null-aware-operators","title":"6. Null-Aware Operators","text":"<p>Used to handle <code>null</code> values safely.</p> Operator Description Example Meaning <code>??</code> Default value if null <code>x ?? 10</code> if <code>x</code> is null \u2192 use 10 <code>??=</code> Assign if null <code>x ??= 5</code> assigns 5 only if <code>x</code> is null <code>?.</code> Access property safely <code>obj?.name</code> returns null if obj is null <pre><code>void main() {\n  int? a;\n  a ??= 10;       // assign 10 if a is null\n  print(a);       // 10\n}\n</code></pre>"},{"location":"core/operators/#7-conditional-operator-ternary","title":"7. Conditional Operator (Ternary)","text":"<p>Used to shorten <code>if-else</code> statements.</p> <pre><code>void main() {\n  var score = 70;\n  var result = (score &gt;= 50) ? 'Pass' : 'Fail';\n  print(result); // Pass\n}\n</code></pre>"},{"location":"core/operators/#8-cascade-operator","title":"8. Cascade Operator (<code>..</code>)","text":"<p>Allows chaining multiple operations on the same object.</p> <pre><code>class Student {\n  String? name;\n  int? age;\n}\n\nvoid main() {\n  var s = Student()\n    ..name = 'Ali'\n    ..age = 21;\n\n  print('Name: ${s.name}, Age: ${s.age}');\n}\n</code></pre>"},{"location":"core/operators/#summary","title":"\u2705 Summary","text":"<p>Operators make your Dart code concise and expressive \u2014 from simple math to handling nulls and chaining methods efficiently.</p>"},{"location":"core/operators/#practice-tasks","title":"\ud83e\udde0 Practice Tasks","text":"<p>Try these small exercises to strengthen your understanding:</p> <ol> <li> <p>Even or Odd:    Write a program that checks if a number is even or odd using the modulus operator (<code>%</code>).</p> </li> <li> <p>Pass or Fail:    Use a ternary operator to print <code>\"Pass\"</code> if marks \u2265 50, otherwise <code>\"Fail\"</code>.</p> </li> <li> <p>Null Handling:    Create a nullable variable <code>String? name;</code> and print <code>\"Guest\"</code> if it\u2019s null using <code>??</code>.</p> </li> <li> <p>Type Check:    Write a condition to check if a variable <code>x</code> is a <code>double</code> using the <code>is</code> operator.</p> </li> </ol> <p>\ud83c\udfaf Next: Learn about Control Flow Statements \u2192 to see how these operators work in real-world code.</p>"},{"location":"core/variables/","title":"\ud83e\udde0 Variables and Data Types in Dart","text":"<p>Understanding variables and data types is the foundation of any programming language \u2014 and Dart is no exception. Let\u2019s explore what they are, how to use them, and how Dart makes them both powerful and simple.</p>"},{"location":"core/variables/#step-1-what-is-a-variable","title":"\ud83e\ude9c Step 1: What Is a Variable?","text":"<p>A variable is like a container that stores a value \u2014 it gives data a name so you can use it in your program.</p> <p>\ud83e\uddfa Variable = Label + Value</p>"},{"location":"core/variables/#example","title":"\ud83d\udca1 Example","text":"<pre><code>void main() {\n  var name = 'Arshad';\n  print(name);\n}\n</code></pre> <p>Output:</p> <pre><code>Arshad\n</code></pre> <p>Explanation:</p> Part Meaning <code>name</code> Variable name <code>'Arshad'</code> Value assigned <code>var</code> Dart automatically infers the type (<code>String</code> in this case)"},{"location":"core/variables/#step-2-declaring-variables","title":"\ud83e\udde9 Step 2: Declaring Variables","text":"<p>There are multiple ways to declare variables in Dart, each with a specific purpose.</p> Keyword Description Example <code>var</code> Type inferred automatically <code>var age = 20;</code> <code>dynamic</code> Type can change later <code>dynamic data = 'Hello'; data = 123;</code> <code>final</code> Immutable after assignment (runtime constant) <code>final city = 'Lahore';</code> <code>const</code> Immutable at compile time <code>const PI = 3.14;</code> Explicit Type Declare with a specific type <code>int year = 2025;</code>"},{"location":"core/variables/#step-3-understanding-dart-data-types","title":"\u26a1 Step 3: Understanding Dart Data Types","text":"<p>Dart is statically typed, meaning every variable has a specific type \u2014 even when Dart infers it for you.</p>"},{"location":"core/variables/#numbers","title":"\ud83d\udd22 Numbers","text":"<p>Dart supports two main number types:</p> <ul> <li><code>int</code> \u2192 for integers (whole numbers)  </li> <li><code>double</code> \u2192 for decimal numbers  </li> </ul>"},{"location":"core/variables/#example_1","title":"Example","text":"<pre><code>void main() {\n  int age = 25;\n  double price = 9.99;\n\n  print('Age: $age');\n  print('Price: $price');\n}\n</code></pre> <p>Output:</p> <pre><code>Age: 25\nPrice: 9.99\n</code></pre> <p>\u2705 You can also use <code>num</code> (can store both <code>int</code> and <code>double</code>):</p> <pre><code>num total = 100.5;\n</code></pre>"},{"location":"core/variables/#strings","title":"\ud83e\uddf5 Strings","text":"<p>Strings represent text.</p> <pre><code>void main() {\n  String name = 'Arshad';\n  String greeting = 'Hello, $name!'; // String interpolation\n  print(greeting);\n}\n</code></pre> <p>Output:</p> <pre><code>Hello, Arshad!\n</code></pre> <p>String Tips</p> <ul> <li>Use <code>' '</code> or <code>\" \"</code> \u2014 both work.  </li> <li>Use triple quotes (<code>'''</code> or <code>\"\"\"</code>) for multi-line strings.  </li> <li>Use interpolation (<code>$variable</code> or <code>${expression}</code>) for string combination.  </li> </ul>"},{"location":"core/variables/#booleans-bool","title":"\u2699\ufe0f Booleans (<code>bool</code>)","text":"<p>Represents true or false values.</p> <pre><code>void main() {\n  bool isActive = true;\n  bool isLoggedIn = false;\n\n  print(isActive);\n  print(isLoggedIn);\n}\n</code></pre> <p>Output:</p> <pre><code>true\nfalse\n</code></pre> <p>\u2705 Used often in conditions:</p> <pre><code>if (isActive) {\n  print('User is active!');\n}\n</code></pre>"},{"location":"core/variables/#lists-arrays","title":"\ud83e\uddfa Lists (Arrays)","text":"<p>A List stores multiple values in an ordered sequence.</p> <pre><code>void main() {\n  List&lt;String&gt; fruits = ['Apple', 'Banana', 'Mango'];\n  print(fruits);\n  print(fruits[1]); // Access by index\n}\n</code></pre> <p>Output:</p> <pre><code>[Apple, Banana, Mango]\nBanana\n</code></pre> <p>\u2705 Modify lists dynamically:</p> <pre><code>fruits.add('Orange');\nfruits.remove('Banana');\n</code></pre> <p>Note</p> <p>Lists in Dart are zero-indexed \u2014 meaning the first element is at index <code>0</code>.</p>"},{"location":"core/variables/#maps-keyvalue-pairs","title":"\ud83d\uddfa\ufe0f Maps (Key\u2013Value Pairs)","text":"<p>Maps store data as key \u2192 value pairs, similar to dictionaries in other languages.</p> <pre><code>void main() {\n  Map&lt;String, String&gt; user = {\n    'name': 'Arshad',\n    'city': 'Lahore',\n    'country': 'Pakistan',\n  };\n\n  print(user['name']); // Access by key\n}\n</code></pre> <p>Output:</p> <pre><code>Arshad\n</code></pre> <p>Tip</p> <p>Maps are excellent for representing structured data \u2014 such as user profiles or configuration settings.</p>"},{"location":"core/variables/#sets","title":"\ud83d\udd22 Sets","text":"<p>A Set is an unordered collection of unique values (no duplicates).</p> <pre><code>void main() {\n  Set&lt;int&gt; numbers = {1, 2, 3, 3, 2};\n  print(numbers);\n}\n</code></pre> <p>Output:</p> <pre><code>{1, 2, 3}\n</code></pre>"},{"location":"core/variables/#step-4-type-inference-var-vs-dynamic","title":"\ud83e\uddf1 Step 4: Type Inference \u2014 <code>var</code> vs <code>dynamic</code>","text":""},{"location":"core/variables/#var","title":"<code>var</code>","text":"<pre><code>var name = 'Arshad';  // inferred as String\nname = 'Ali';         // \u2705 allowed\n// name = 10;         // \u274c Error: cannot assign int to String\n</code></pre>"},{"location":"core/variables/#dynamic","title":"<code>dynamic</code>","text":"<pre><code>dynamic variable = 'Hello';\nvariable = 123;       // \u2705 Works\nvariable = true;      // \u2705 Works\n</code></pre> <p>Tip</p> <p>Use: - <code>var</code> \u2192 when type does not change. - <code>dynamic</code> \u2192 when type may change during runtime.</p>"},{"location":"core/variables/#step-5-constants-final-vs-const","title":"\ud83d\udd12 Step 5: Constants \u2014 <code>final</code> vs <code>const</code>","text":"<p>Both create immutable variables.</p> Keyword When to Use Example <code>final</code> Value known at runtime <code>final now = DateTime.now();</code> <code>const</code> Value known at compile-time <code>const pi = 3.1416;</code>"},{"location":"core/variables/#example_2","title":"Example","text":"<pre><code>void main() {\n  final today = DateTime.now(); // runtime constant\n  const version = 1.0;          // compile-time constant\n}\n</code></pre>"},{"location":"core/variables/#step-6-type-conversion","title":"\ud83d\udd04 Step 6: Type Conversion","text":"<p>Convert between types easily:</p> <pre><code>void main() {\n  // String \u2192 int\n  int a = int.parse('10');\n\n  // String \u2192 double\n  double b = double.parse('12.5');\n\n  // int \u2192 String\n  String c = a.toString();\n\n  // double \u2192 int\n  int d = b.toInt();\n\n  print('$a, $b, $c, $d');\n}\n</code></pre> <p>Output:</p> <pre><code>10, 12.5, 10, 12\n</code></pre>"},{"location":"core/variables/#step-7-summary-table","title":"\ud83d\udcda Step 7: Summary Table","text":"Type Description Example <code>int</code> Whole numbers <code>int age = 20;</code> <code>double</code> Decimal numbers <code>double price = 10.5;</code> <code>String</code> Text <code>String name = 'Dart';</code> <code>bool</code> True/False <code>bool isOk = true;</code> <code>List</code> Ordered collection <code>List&lt;int&gt; nums = [1, 2, 3];</code> <code>Map</code> Key-value pairs <code>Map user = {'id': 1};</code> <code>Set</code> Unique values <code>Set&lt;int&gt; s = {1, 2, 3};</code> <code>var</code> Type inferred automatically <code>var name = 'Ali';</code> <code>dynamic</code> Type flexible <code>dynamic x = 10; x = 'Hi';</code> <code>final</code> Immutable (runtime) <code>final city = 'Lahore';</code> <code>const</code> Immutable (compile time) <code>const PI = 3.14;</code>"},{"location":"core/variables/#practice-exercise","title":"\ud83e\udde9 Practice Exercise","text":"<p>Try this small challenge \ud83d\udc47</p> <pre><code>void main() {\n  var name = 'Arshad';\n  int age = 25;\n  double height = 5.9;\n  bool isStudent = true;\n  List&lt;String&gt; skills = ['Dart', 'Flutter', 'Git'];\n  Map&lt;String, String&gt; address = {'city': 'Lahore', 'country': 'Pakistan'};\n\n  print('My name is $name, I am $age years old.');\n  print('Height: $height ft');\n  print('Am I a student? $isStudent');\n  print('Skills: $skills');\n  print('Address: $address');\n}\n</code></pre> <p>Expected Output:</p> <pre><code>My name is Arshad, I am 25 years old.\nHeight: 5.9 ft\nAm I a student? true\nSkills: [Dart, Flutter, Git]\nAddress: {city: Lahore, country: Pakistan}\n</code></pre>"},{"location":"core/variables/#quick-recap","title":"\ud83e\udde0 Quick Recap","text":"<ul> <li>Dart automatically infers variable types with <code>var</code>.  </li> <li>Use <code>dynamic</code> for variables that can hold different types.  </li> <li>Use <code>final</code> or <code>const</code> for immutable values.  </li> <li>Core built-in types: <code>int</code>, <code>double</code>, <code>String</code>, <code>bool</code>, <code>List</code>, <code>Map</code>, and <code>Set</code>.  </li> <li>Everything in Dart is an object, even numbers and booleans.  </li> </ul>   - [:material-arrow-left-circle: Previous \u2014 Hello World](../getting-started/hello-world.md) - [:material-arrow-right-circle: Next \u2014 Operators in Dart](operators.md)"},{"location":"getting-started/basic-syntax/","title":"\ud83d\udcdd Dart Basic Syntax","text":"<p>Before diving deep, let\u2019s understand how Dart code is structured and written.</p>"},{"location":"getting-started/basic-syntax/#1-your-first-dart-program","title":"1. Your First Dart Program","text":"<pre><code>void main() {\n  print('Hello, Dart!');\n}\n</code></pre> <p>Explanation: - <code>void main()</code> \u2192 The entry point of every Dart program. - <code>print()</code> \u2192 Displays output to the console.</p>"},{"location":"getting-started/basic-syntax/#2-comments","title":"2. Comments","text":"<pre><code>// Single-line comment\n\n/* Multi-line\n   comment */\n\n/**\n * Documentation comment\n */\n</code></pre>"},{"location":"getting-started/basic-syntax/#3-variables","title":"3. Variables","text":"<p>Variables store data. Dart is statically typed, but supports type inference.</p> <pre><code>var name = 'Arshad';   // Type inferred as String\nint age = 25;\ndouble pi = 3.14;\nbool isActive = true;\n</code></pre> <p>Constants:</p> <pre><code>const speedOfLight = 299792458; // Compile-time constant\nfinal currentTime = DateTime.now(); // Runtime constant\n</code></pre>"},{"location":"getting-started/basic-syntax/#4-data-types","title":"4. Data Types","text":"Type Example Description <code>int</code> <code>10</code> Integer values <code>double</code> <code>3.14</code> Decimal numbers <code>String</code> <code>'Hello'</code> Text values <code>bool</code> <code>true</code>, <code>false</code> Logical values <code>List</code> <code>[1, 2, 3]</code> Ordered collection <code>Map</code> <code>{'key': 'value'}</code> Key-value pairs <code>Set</code> <code>{1, 2, 3}</code> Unique values"},{"location":"getting-started/basic-syntax/#5-string-operations","title":"5. String Operations","text":"<pre><code>var first = 'Dart';\nvar second = 'Language';\n\nprint('$first $second');   // String interpolation\nprint(first + ' ' + second);\nprint('Length: ${first.length}');\n</code></pre>"},{"location":"getting-started/basic-syntax/#6-operators","title":"6. Operators","text":"<pre><code>// Arithmetic\nvar sum = 10 + 5;\nvar product = 10 * 2;\n\n// Comparison\nprint(5 &gt; 3);   // true\nprint(5 == 5);  // true\n\n// Logical\nprint(true &amp;&amp; false); // false\n\n// Null-aware\nvar name;\nprint(name ?? 'Guest'); // Prints 'Guest'\n</code></pre>"},{"location":"getting-started/basic-syntax/#7-control-flow","title":"7. Control Flow","text":""},{"location":"getting-started/basic-syntax/#ifelse","title":"If\u2013Else","text":"<pre><code>if (age &gt;= 18) {\n  print('Adult');\n} else {\n  print('Minor');\n}\n</code></pre>"},{"location":"getting-started/basic-syntax/#loops","title":"Loops","text":"<pre><code>for (var i = 0; i &lt; 3; i++) {\n  print(i);\n}\n\nwhile (age &lt; 30) {\n  print('Still young!');\n  age++;\n}\n\ndo {\n  print('This runs at least once');\n} while (false);\n</code></pre>"},{"location":"getting-started/basic-syntax/#switch","title":"Switch","text":"<pre><code>var grade = 'A';\nswitch (grade) {\n  case 'A':\n    print('Excellent');\n    break;\n  case 'B':\n    print('Good');\n    break;\n  default:\n    print('Try again');\n}\n</code></pre>"},{"location":"getting-started/basic-syntax/#8-functions","title":"8. Functions","text":"<pre><code>int add(int a, int b) {\n  return a + b;\n}\n\nvoid greet(String name) =&gt; print('Hello, $name');\n</code></pre>"},{"location":"getting-started/basic-syntax/#9-null-safety","title":"9. Null Safety","text":"<p>Dart uses null safety \u2014 variables can\u2019t be null unless declared nullable.</p> <pre><code>int? number = null;  // Nullable\nint count = 10;      // Non-nullable\n</code></pre>"},{"location":"getting-started/basic-syntax/#10-collections","title":"10. Collections","text":""},{"location":"getting-started/basic-syntax/#lists","title":"Lists","text":"<pre><code>var fruits = ['apple', 'banana'];\nfruits.add('mango');\nprint(fruits[0]); // apple\n</code></pre>"},{"location":"getting-started/basic-syntax/#maps","title":"Maps","text":"<pre><code>var user = {'name': 'Arshad', 'age': 25};\nprint(user['name']); // Arshad\n</code></pre>"},{"location":"getting-started/basic-syntax/#sets","title":"Sets","text":"<pre><code>var numbers = {1, 2, 2, 3};\nprint(numbers); // {1, 2, 3}\n</code></pre>"},{"location":"getting-started/basic-syntax/#summary","title":"\u2705 Summary","text":"Concept Example Entry point <code>void main()</code> Variable <code>var x = 10;</code> Function <code>int add(int a, int b)</code> Conditional <code>if</code>, <code>else</code>, <code>switch</code> Loop <code>for</code>, <code>while</code>, <code>do</code> Collections <code>List</code>, <code>Map</code>, <code>Set</code> Null Safety <code>int? x = null</code> <p>\ud83d\udd39 Next Step \u2192 Learn about Operators or Control Flow in Depth</p>"},{"location":"getting-started/hello-world/","title":"\ud83d\udc4b Hello World in Dart","text":"<p>Your first step into Dart programming starts with the classic \u201cHello, World!\u201d example. This simple program introduces you to Dart syntax and how to run Dart code.</p>"},{"location":"getting-started/hello-world/#what-is-hello-world","title":"\ud83e\udde0 What Is \u201cHello World\u201d?","text":"<p>\u201cHello World\u201d is traditionally the first program written in any language. It prints a simple message to the screen \u2014 helping you test that your setup works correctly.</p>"},{"location":"getting-started/hello-world/#step-1-install-dart","title":"\u2699\ufe0f Step 1: Install Dart","text":"<p>If you haven\u2019t already, install Dart on your system.</p>"},{"location":"getting-started/hello-world/#windows-linux-macos","title":"\ud83e\ude9f Windows / \ud83d\udc27 Linux / \ud83c\udf4e macOS","text":"<pre><code># Check if Dart is installed\ndart --version\n\n# If not installed, visit:\nhttps://dart.dev/get-dart\n</code></pre>"},{"location":"getting-started/hello-world/#step-2-create-a-dart-file","title":"\ud83d\udcdd Step 2: Create a Dart File","text":"<p>Create a new file named <code>hello.dart</code> anywhere on your computer.</p> <pre><code>touch hello.dart\n</code></pre>"},{"location":"getting-started/hello-world/#step-3-write-the-code","title":"\ud83d\udcbb Step 3: Write the Code","text":"<p>Open <code>hello.dart</code> in your code editor and add:</p> <pre><code>void main() {\n  print('Hello, World!');\n}\n</code></pre>"},{"location":"getting-started/hello-world/#explanation","title":"Explanation:","text":"<ul> <li><code>void main()</code> \u2192 The entry point of every Dart program.  </li> <li><code>print()</code> \u2192 A built-in function to display text on the screen.  </li> <li><code>'Hello, World!'</code> \u2192 A string (text) enclosed in single quotes.</li> </ul>"},{"location":"getting-started/hello-world/#step-4-run-the-program","title":"\u25b6\ufe0f Step 4: Run the Program","text":"<p>Run your program in the terminal:</p> <pre><code>dart run hello.dart\n</code></pre> <p>You\u2019ll see this output:</p> <pre><code>Hello, World!\n</code></pre>"},{"location":"getting-started/hello-world/#step-5-try-modifying-it","title":"\ud83e\udde9 Step 5: Try Modifying It","text":"<p>Experiment by changing the text:</p> <pre><code>void main() {\n  print('Welcome to Dart!');\n}\n</code></pre> <p>Then run it again to see the result.</p>"},{"location":"getting-started/hello-world/#summary","title":"\u2705 Summary","text":"Concept Description <code>main()</code> Starting point of the program <code>print()</code> Outputs text to the console <code>'...'</code> String literal (text)"},{"location":"getting-started/hello-world/#you-learned","title":"\ud83c\udfaf You Learned:","text":"<ul> <li>How to write and run your first Dart program.  </li> <li>The basic structure of a Dart program.  </li> <li>How output is displayed in the console.</li> </ul> <p>Next \u2192 Variables and Data Types</p>"},{"location":"getting-started/installation/","title":"\ud83d\udcbb Step 2: Set Up Your Environment","text":"<p>Before you start coding in Dart, you need a place to write and run your programs. You can either use an online editor (DartPad) or install Dart locally on your computer.</p>"},{"location":"getting-started/installation/#option-1-use-dartpad-recommended-for-beginners","title":"\ud83d\udca1 Option 1 \u2014 Use DartPad (Recommended for Beginners)","text":"<p>DartPad is an online Dart editor that lets you write, run, and share Dart code instantly \u2014 no installation required.</p>"},{"location":"getting-started/installation/#step-by-step-guide","title":"\ud83e\ude9c Step-by-Step Guide","text":""},{"location":"getting-started/installation/#1-open-dartpad","title":"1\ufe0f\u20e3 Open DartPad","text":"<p>Visit \ud83d\udc49 https://dartpad.dev</p>"},{"location":"getting-started/installation/#2-explore-the-interface","title":"2\ufe0f\u20e3 Explore the Interface","text":"<ul> <li>Left panel \u2192 Code editor (write your Dart code here)  </li> <li>Right panel \u2192 Console output (see your results here)  </li> <li>Top bar \u2192 Common actions:  </li> <li>\u25b6\ufe0f Run \u2014 Execute your program  </li> <li>\ud83d\udd04 Reset \u2014 Restore the default example  </li> <li>\ud83d\udcbe Share \u2014 Generate a shareable link to your code  </li> </ul>"},{"location":"getting-started/installation/#3-run-your-first-program","title":"3\ufe0f\u20e3 Run Your First Program","text":"<p>DartPad loads a sample \u201cHello World\u201d program by default:</p> <pre><code>void main() {\n  print('Hello, World!');\n}\n</code></pre> <p>Click \u25b6\ufe0f Run, and you\u2019ll see the output on the right:</p> <pre><code>Hello, World!\n</code></pre>"},{"location":"getting-started/installation/#4-try-editing","title":"4\ufe0f\u20e3 Try Editing","text":"<p>Change the code to:</p> <pre><code>void main() {\n  print('Welcome to Dart!');\n}\n</code></pre> <p>Click Run again \u2014 your new message will appear.</p>"},{"location":"getting-started/installation/#5-experiment","title":"5\ufe0f\u20e3 Experiment!","text":"<ul> <li>DartPad supports Dart basics, functions, and even Flutter UI code   (use New Pad \u2192 Flutter to try UI examples).</li> <li>You can use DartPad from any browser \u2014 no setup needed.</li> </ul> <p>You\u2019re ready!</p> <p>\u2705 That\u2019s it \u2014 you\u2019re now ready to start coding in Dart online, instantly.</p>"},{"location":"getting-started/installation/#option-2-install-dart-locally-recommended-for-advanced-users","title":"\ud83d\udcbb Option 2 \u2014 Install Dart Locally (Recommended for Advanced Users)","text":"<p>If you want to build real Dart or Flutter projects, install Dart on your local machine. This gives you offline access, package management, and development tools.</p>"},{"location":"getting-started/installation/#step-by-step-setup","title":"\ud83e\ude9c Step-by-Step Setup","text":""},{"location":"getting-started/installation/#1-check-system-requirements","title":"1\ufe0f\u20e3 Check System Requirements","text":"<p>You can install Dart on:</p> <ul> <li>\ud83e\ude9f Windows</li> <li>\ud83d\udc27 Linux (Debian/Ubuntu-based)</li> <li>\ud83c\udf4e macOS</li> </ul>"},{"location":"getting-started/installation/#installing-dart-on-debian-13-trixie","title":"\ud83d\udc27 Installing Dart on Debian 13 (Trixie)","text":"<p>Note</p> <p>\ud83e\udde0 Debian 13 uses updated package security \u2014 the old <code>apt-key</code> method is deprecated. Follow these new, secure steps to install the Dart SDK.</p>"},{"location":"getting-started/installation/#step-1-update-your-system","title":"Step 1 \u2014 Update Your System","text":"<pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\nsudo apt install apt-transport-https curl gnupg -y\n</code></pre>"},{"location":"getting-started/installation/#step-2-add-the-google-linux-repository-key","title":"Step 2 \u2014 Add the Google Linux Repository Key","text":"<pre><code>sudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://dl-ssl.google.com/linux/linux_signing_key.pub \\\n  | sudo gpg --dearmor -o /etc/apt/keyrings/dart.gpg\n</code></pre>"},{"location":"getting-started/installation/#step-3-add-the-dart-repository","title":"Step 3 \u2014 Add the Dart Repository","text":"<pre><code>echo \"deb [signed-by=/etc/apt/keyrings/dart.gpg] \\\nhttps://storage.googleapis.com/download.dartlang.org/linux/debian stable main\" \\\n| sudo tee /etc/apt/sources.list.d/dart_stable.list\n</code></pre>"},{"location":"getting-started/installation/#step-4-install-dart-sdk","title":"Step 4 \u2014 Install Dart SDK","text":"<pre><code>sudo apt update\nsudo apt install dart -y\n</code></pre>"},{"location":"getting-started/installation/#step-5-verify-installation","title":"Step 5 \u2014 Verify Installation","text":"<pre><code>dart --version\n</code></pre> <p>Expected output:</p> <pre><code>Dart SDK version: 3.x.x (stable)\n</code></pre>"},{"location":"getting-started/installation/#optional-step-6-add-dart-to-path","title":"(Optional) Step 6 \u2014 Add Dart to PATH","text":"<p>If Dart isn\u2019t recognized globally:</p> <pre><code>echo 'export PATH=\"$PATH:/usr/lib/dart/bin\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"getting-started/installation/#step-7-test-your-setup","title":"Step 7 \u2014 Test Your Setup","text":"<p>Create and run a test file:</p> <pre><code>mkdir ~/dart_projects\ncd ~/dart_projects\nnano hello.dart\n</code></pre> <p>Add the following code:</p> <pre><code>void main() {\n  print('Hello, Debian 13! Dart is working perfectly.');\n}\n</code></pre> <p>Run it:</p> <pre><code>dart run hello.dart\n</code></pre> <p>You should see:</p> <pre><code>Hello, Debian 13! Dart is working perfectly.\n</code></pre> <p>Success</p> <p>\u2705 Dart SDK is now fully installed and configured on Debian 13 (Trixie).</p>"},{"location":"getting-started/installation/#installing-dart-on-windows","title":"\ud83e\ude9f Installing Dart on Windows","text":"<ol> <li>Visit \ud83d\udc49 https://dart.dev/get-dart </li> <li>Download the Windows Installer (.msi).  </li> <li>Run it and follow the setup wizard.  </li> <li>After installation, open Command Prompt and verify:</li> </ol> <p><code>bash    dart --version</code></p> <p>Expected output:</p> <pre><code>Dart SDK version: 3.x.x\n</code></pre>"},{"location":"getting-started/installation/#installing-dart-on-macos","title":"\ud83c\udf4e Installing Dart on macOS","text":"<p>Install Dart using Homebrew:</p> <pre><code>brew tap dart-lang/dart\nbrew install dart\n</code></pre> <p>Then verify:</p> <pre><code>dart --version\n</code></pre>"},{"location":"getting-started/installation/#set-up-your-code-editor","title":"\u2699\ufe0f Set Up Your Code Editor","text":""},{"location":"getting-started/installation/#using-vs-code-recommended","title":"\ud83e\udde9 Using VS Code (Recommended)","text":"<ol> <li>Download \u2192 https://code.visualstudio.com </li> <li>Open VS Code \u2192 Extensions panel  </li> <li>Search for \u201cDart\u201d \u2192 Click Install</li> </ol> <p>You can now create, run, and debug Dart projects inside VS Code.</p> <p>Tip</p> <p>\ud83d\udca1 Other supported editors include IntelliJ IDEA, Android Studio, and Sublime Text.</p>"},{"location":"getting-started/installation/#run-your-first-local-program","title":"\ud83e\uddea Run Your First Local Program","text":"<ol> <li>Create a new directory and file:</li> </ol> <p><code>bash    mkdir dart_projects    cd dart_projects    nano hello.dart</code></p> <ol> <li>Add this code:</li> </ol> <p><code>dart    void main() {      print('Hello from Dart on your computer!');    }</code></p> <ol> <li>Run it:</li> </ol> <p><code>bash    dart run hello.dart</code></p> <p>Expected output:</p> <pre><code>Hello from Dart on your computer!\n</code></pre> <p>All Set!</p> <p>\u2705 You\u2019re now ready to build and run Dart projects locally.</p> <p>Continue to: \ud83d\udc49 Step 3: Your First Dart Program \u2013 Explained to understand how <code>void main()</code> and <code>print()</code> work.</p>"}]}